/*
RENAD ALDHASE 1806983
 */
package project380;

import cpit380practice.*;
import java.awt.*;
import java.util.Arrays;
import javax.swing.*;

/**
 *
 * @author Rnd21
 */
public class Filters extends javax.swing.JFrame {

    //static
    static String image1;
    static Picture pic1;
    
    public Filters() {
        initComponents();
        this.setTitle("Filters");
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Before1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        Filter = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(250, 231, 238));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/rightarrow-01.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        Before1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(176, 181, 189)));

        jButton1.setBackground(new java.awt.Color(222, 222, 222));
        jButton1.setFont(new java.awt.Font("Modern No. 20", 0, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(102, 102, 102));
        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Modern No. 20", 2, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 153, 153));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Filters");

        Filter.setFont(new java.awt.Font("Modern No. 20", 0, 18)); // NOI18N
        Filter.setForeground(new java.awt.Color(102, 102, 102));
        Filter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "------", "Min", "Max", "Median", "Laplacian" }));
        Filter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FilterItemStateChanged(evt);
            }
        });
        Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Before1, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(305, 305, 305))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Before1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        new picPart().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Pic1
        image1 = FileChooser.pickAFile();
        pic1 = new Picture(image1);
        Before1.setIcon(new ImageIcon(pic1.getImage().getScaledInstance(Before1.getWidth(), Before1.getHeight(), Image.SCALE_SMOOTH)));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void FilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FilterItemStateChanged
        // TODO add your handling code here:
        pic1 = new Picture(image1);
        String filter = Filter.getSelectedItem().toString();
        Picture target = new Picture(pic1.getWidth(), pic1.getHeight());

        if (filter.equalsIgnoreCase("Min")) {

            for (int x = 1; x < pic1.getWidth() - 1; x++) {
                for (int y = 1; y < pic1.getHeight() - 1; y++) {
                    double[] arr = new double[9];
                    arr[0] = pic1.getPixel(x - 1, y - 1).getAverage();
                    arr[1] = pic1.getPixel(x - 1, y).getAverage();
                    arr[2] = pic1.getPixel(x - 1, y + 1).getAverage();
                    arr[3] = pic1.getPixel(x, y - 1).getAverage();
                    arr[4] = pic1.getPixel(x, y).getAverage();
                    arr[5] = pic1.getPixel(x, y + 1).getAverage();
                    arr[6] = pic1.getPixel(x + 1, y - 1).getAverage();
                    arr[7] = pic1.getPixel(x + 1, y).getAverage();
                    arr[8] = pic1.getPixel(x + 1, y + 1).getAverage();
                    Arrays.sort(arr);
                    Color c = new Color((int) arr[0], (int) arr[0], (int) arr[0]);
                    target.getPixel(x, y).setColor(c);
                }
            }

        } else if (filter.equalsIgnoreCase("Max")) {

            for (int x = 1; x < pic1.getWidth() - 1; x++) {
                for (int y = 1; y < pic1.getHeight() - 1; y++) {
                    double[] arr = new double[9];
                    arr[0] = pic1.getPixel(x - 1, y - 1).getAverage();
                    arr[1] = pic1.getPixel(x - 1, y).getAverage();
                    arr[2] = pic1.getPixel(x - 1, y + 1).getAverage();
                    arr[3] = pic1.getPixel(x, y - 1).getAverage();
                    arr[4] = pic1.getPixel(x, y).getAverage();
                    arr[5] = pic1.getPixel(x, y + 1).getAverage();
                    arr[6] = pic1.getPixel(x + 1, y - 1).getAverage();
                    arr[7] = pic1.getPixel(x + 1, y).getAverage();
                    arr[8] = pic1.getPixel(x + 1, y + 1).getAverage();
                    Arrays.sort(arr);
                    Color c = new Color((int) arr[8], (int) arr[8], (int) arr[8]);
                    target.getPixel(x, y).setColor(c);
                }
            }

        } else if (filter.equalsIgnoreCase("Median")) {

            for (int x = 1; x < pic1.getWidth() - 1; x++) {
                for (int y = 1; y < pic1.getHeight() - 1; y++) {
                    double[] arr = new double[9];
                    arr[0] = pic1.getPixel(x - 1, y - 1).getAverage();
                    arr[1] = pic1.getPixel(x - 1, y).getAverage();
                    arr[2] = pic1.getPixel(x - 1, y + 1).getAverage();
                    arr[3] = pic1.getPixel(x, y - 1).getAverage();
                    arr[4] = pic1.getPixel(x, y).getAverage();
                    arr[5] = pic1.getPixel(x, y + 1).getAverage();
                    arr[6] = pic1.getPixel(x + 1, y - 1).getAverage();
                    arr[7] = pic1.getPixel(x + 1, y).getAverage();
                    arr[8] = pic1.getPixel(x + 1, y + 1).getAverage();
                    Arrays.sort(arr);
                    Color c = new Color((int) arr[4], (int) arr[4], (int) arr[4]);
                    target.getPixel(x, y).setColor(c);
                }
            }

        } else if (filter.equalsIgnoreCase("Laplacian")) {

            Pixel p1, p2, p3, p4, p5, p6, p7, p8, p9;
            for (int x = 1; x < pic1.getWidth() - 1; x++) {
                for (int y = 1; y < pic1.getHeight() - 1; y++) {
                    p1 = pic1.getPixel(x - 1, y - 1);
                    p2 = pic1.getPixel(x - 1, y);
                    p3 = pic1.getPixel(x - 1, y + 1);
                    p4 = pic1.getPixel(x, y - 1);
                    p5 = pic1.getPixel(x, y);
                    p6 = pic1.getPixel(x, y + 1);
                    p7 = pic1.getPixel(x + 1, y - 1);
                    p8 = pic1.getPixel(x + 1, y);
                    p9 = pic1.getPixel(x + 1, y + 1);
                    int redValue
                    = (-1 * p1.getRed()) + (-1 * p2.getRed()) + (-1 * p3.getRed())
                    + (-1 * p4.getRed()) + (8 * p5.getRed()) + (-1 * p6.getRed())
                    + (-1 * p7.getRed()) + (-1 * p8.getRed()) + (-1 * p9.getRed());
                    if (redValue < 0) {
                        redValue = 0;
                    } else if (redValue > 255) {
                        redValue = 255;
                    }
                    Color c = new Color(redValue, redValue, redValue);
                    target.getPixel(x, y).setColor(c);
                }
            }

        }else {target = pic1;}
        Before1.setIcon(new ImageIcon(target.getImage().getScaledInstance(Before1.getWidth(), Before1.getHeight(), Image.SCALE_SMOOTH)));
    }//GEN-LAST:event_FilterItemStateChanged

    private void FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FilterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Filters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Filters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Filters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Filters.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Filters().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Before1;
    private javax.swing.JComboBox<String> Filter;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
